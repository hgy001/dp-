/*
给定不同面额的硬币 coins 和一个总金额 amount。编写一个函数来计算可以凑成总金额所需的最少的硬币个数。如果没有任何一种硬币组合能组成总金额，返回 -1。

你可以认为每种硬币的数量是无限的。

来源：力扣（LeetCode）
链接：https://leetcode-cn.com/problems/coin-change
著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。
*/
class Solution {
public:
    int coinChange(vector<int>& coins, int amount) {
        int max = amount+1;   //定义一个比amount大的值
        vector<int> dp(amount+1,max);  //开一个dp数组
        dp[0] = 0;     //初始值
        for (int i = 1; i <= amount; i++) {
            for (int j = 0; j < coins.size(); j++) {              //输入：coins = [1, 2, 5], amount = 11
                                                                    输出：3 
                                                                    解释：11 = 5 + 5 + 1
                if (coins[j]<=i) {                               //状态方程  f(i) = min (f(i-1),f(i-2),f(i-5))+1;
                    dp[i] = min(dp[i], dp[i - coins[j]] + 1);
                } 
            }
            
        }
        if (dp[amount]>amount) {
            return -1;
        } else{
            return dp[amount];
        }
    }
};
